#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct Person {
    int tag;
    char date[20];
    char fee_paid[20];
    char name[20];
    int age;
    char organization[50];
    char job[20];
    struct Person* next;
};

struct Person* CreateNode();
int load_data(struct Person*);
void linked_open(struct Person*);
void sortByAge(struct Person*, int);
void Link(struct Person []);
void print_list(struct Person*);
void search_fee_paid_in_struct(struct Person persons[]);
void search_gachon_engineer_in_struct(struct Person persons[]);
void search_fee_paid_in_list(struct Person* head);
void search_gachon_engineer_in_list(struct Person* head);
void Delete_array(struct Person List[]);
void Delete_linked(struct Person* head);
void updateLateSubmitters(struct Person persons[], int);
void updateLateSubmitters_linked(struct Person*);

int main()
{
    struct Person persons[50];
    struct Person* head= CreateNode();
    head->next = persons;
    int person_num;

    person_num = load_data(persons);
    sortByAge(persons, person_num);
    linked_open(persons);
    Link(persons);
    print_list(head);

    search_fee_paid_in_struct(persons);
    search_fee_paid_in_list(head);
    search_gachon_engineer_in_struct(persons);
    search_gachon_engineer_in_list(head);
    Delete_array(persons);
    Delete_linked(head);
    updateLateSubmitters_linked(head);
    updateLateSubmitters(persons, person_num);
   
    return 0;
}
/*
* struct Person* CreateNode()
* Author: 202235154 Chanwoong Hwang
* Summary: create dummy head
* Parameter: struct Person pointer
* Return: struct Person pointer
*/
struct Person* CreateNode()
{
	struct Person* new_node = NULL;
#ifdef DEBUG
	printf("Return a new node address.\n");
#endif
	new_node = (struct Person*)malloc(sizeof(struct Person));

	if (new_node == NULL)
	{
		printf("Memory is full.\n");
		return NULL;
	}
	else
	{
		return new_node;
	}
}

/*
* int load_data (struct Person*)
* Author: 202235154 Chanwoong Hwang
* Summary: read the text file and store the data in a struct array
* Parameter: struct Person pointer
* Return: length of struct array
*/
int load_data(struct  Person* regi_Person)
{
    int i = 0, person_num = 0;
    FILE* regi_file;

    regi_file = fopen("registration_data.txt", "r");
    if (regi_file == NULL)
        printf("file open error\n");
    else
    {
        while (fscanf(regi_file, "%d %*[/] %[^/] %*[/] %[^/] %*[/] %[^/] %*[/] %d %*[/] %[^/] %*[/] %s", &regi_Person[i].tag, regi_Person[i].date, regi_Person[i].fee_paid, regi_Person[i].name, &regi_Person[i].age, regi_Person[i].organization, regi_Person[i].job) == 7)
            i++;
        fclose(regi_file);
    }
    person_num = i;

    return person_num;
}

/*
* void Link(struct Person List2[])
* Author: 202235154 Chanwoong Hwang
* Summary: link the data in a struct array
* Parameter: struct Person
* Return: nothing
*/
void Link(struct Person List2[]) {
    int i = 0;
    while (i < 30) {
        if (i == 29) {
            (List2[29]).next = NULL;
            break;
        }
        (List2[i]).next = &List2[i + 1];
        i++;
    }
}

/*
* void print_list(struct Person* head)
* Author: 202235154 Chanwoong Hwang
* Summary: print the linked list
* Parameter: struct person pointer
* Return: nothing
*/
void print_list(struct Person* head) {
    struct Person* p = head->next;
    printf("-----print linked list-----\n");
    while(p) {
        printf("%d/%s/%s/%s/%d/%s/%s\n", p->tag, p->date, p->fee_paid, p->name, p->age, p->organization, p->job);

        p = p->next;
    }
    printf("\n");
}

/*
* struct Person* linked_open()
* Author: 202235154 Chanwoong Hwang
* Summary: read the text file and store the data in a linked list
* Parameter: none
* Return: address of linked list
*/
void linked_open(struct Person* persons)
{
    int i;
    FILE* regi_file;

    regi_file = fopen("P1.txt", "r");
    if (regi_file == NULL)
        printf("file open error\n");
    else
    {
        for (i = 0; i < 30; i++) {
            fscanf(regi_file, "%d %s %s %s %d %*[/] %[^/] %*[/] %s\n", &(persons[i]).tag, (persons[i]).date, (persons[i]).fee_paid, (persons[i]).name, &(persons[i]).age, (persons[i]).organization, (persons[i]).job);
        }
        fclose(regi_file);
    }
}

/*
* void sortByAge(struct Person* array, int person_num)
* Author: 202235154 Chanwoong Hwang
* Summary: order the array by age
* Parameter: struct person pointer, integer
* Return: nothing
*/
void sortByAge(struct Person* array, int person_num)
{
    struct Person temp;

    for (int i = 0; i < person_num; i++)
    {
        for (int j = 0; j < person_num - i; j++)
        {
            if (array[j].age > array[j + 1].age)
            {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }

    for (int k = 0; k < person_num; k++)
    {
        temp = array[k + 1];
        array[k] = temp;
    }

    FILE* age_file;

    age_file = fopen("P1.txt", "w");
    {
        for (int i = 0; i < person_num; i++)
        {
            fprintf(age_file, "%d %s %s %s %d %s %s\n", array[i].tag, array[i].date, array[i].fee_paid, array[i].name, array[i].age, array[i].organization, array[i].job);
        }
    }

    fclose(age_file);

}
/*
* void search_gachon_engineer_in_struct(struct Person persons[])
* Author: 202135846 Jiye Choi
* Summary: search for engineer from Gachon University in struct
* Parameter: struct person array
* Return: nothing
*/
void search_gachon_engineer_in_struct(struct Person persons[]) {
    printf("------ Search for Gachon University engineer in struct ------\n");
    for (int i = 0; i < 30; i++) {
        char* univ = persons[i].organization;
        char* job = persons[i].job;
        if (strcmp(univ, "Gachon University") == 0) {
            if (strcmp(job, "engineer") == 0) {
                printf("%d %s %s %s %d %s %s\n", persons[i].tag,
                    persons[i].date,
                    persons[i].fee_paid,
                    persons[i].name,
                    persons[i].age,
                    persons[i].organization,
                    persons[i].job);
            }

        }
    }
    printf("\n");
}
/*
* void search_gachon_engineer_in_list(struct Person* head)
* Author: 202135846 Jiye Choi
* Summary: search for engineer from Gachon University in linked list
* Parameter: struct person pointer
* Return: nothing
*/
void search_gachon_engineer_in_list(struct Person* head) {
    struct Person* p = head->next;
    printf("------ Search for Gachon University engineer in list ------\n");
    for (int i = 0; i < 30; i++) {
        char* univ = p->organization;
        char* job = p->job;

        if (strcmp(univ, "Gachon University") == 0) {
            if (strcmp(job, "engineer") == 0) {
                printf("%d %s %s %s %d %s %s\n", p->tag,
                    p->date,
                    p->fee_paid,
                    p->name,
                    p->age,
                    p->organization,
                    p->job);
            }

        }
        p = p->next;
    }
    printf("\n");
}
/*
* void search_fee_paid_in_struct(struct Person persons[])
* Author: 202235002 Jiwon Kang
* Summary: search for the fee-paid (yes) persons in structure array
* Parameter: struct person array
* Return: nothing
*/
void search_fee_paid_in_struct(struct Person persons[]) {
    printf("------ Search for the fee-paid (yes) persons in struct ------\n");
    for (int i = 0; i < 30; i++) {
        if (strcmp(persons[i].fee_paid, "yes") == 0) {
            printf("%d %s %s %s %d %s %s\n", persons[i].tag,
                persons[i].date,
                persons[i].fee_paid,
                persons[i].name,
                persons[i].age,
                persons[i].organization,
                persons[i].job);
        }
    }
    printf("\n");
}
/*
* void search_fee_paid_in_list(struct Person* head)
* Author: 202235002 Jiwon Kang
* Summary: search for the fee-paid (yes) persons in linked list
* Parameter: struct person pointer
* Return: nothing
*/
void search_fee_paid_in_list(struct Person* head)
{
    struct Person* p = head->next;
    printf("------ Search for the fee-paid (yes) persons in list ------\n");
    for (int i = 0; i < 30; i++) {

        if (strcmp(p->fee_paid, "yes") == 0) {
            printf("%d %s %s %s %d %s %s\n", p->tag,
                p->date,
                p->fee_paid,
                p->name,
                p->age,
                p->organization,
                p->job);
        }

        p = p->next;
    }
    printf("\n");
}

/*
* void Delete_linked(struct Person* head)
* Author: 202235005 Minseok Gwak
* Summary: remove all staff's data from the array
* Parameter: struct person pointer
* Return: nothing
*/
void Delete_linked(struct Person* head)
{
	int j = 0;
	char job[20] = "staff";
	/* Start from head->next instead of head */
	struct Person* ptr = head->next, * prev_ptr = head;
    struct Person* delet=NULL;
	while (ptr)
    {	
        
        if (ptr->tag == -1) {
            (*prev_ptr).next = (*ptr).next;
            delet = ptr->next;
            ptr->next = NULL;
        }

		prev_ptr = ptr;
        if (ptr->tag == -1)
            ptr = delet;
        else
		ptr = ptr->next;/* adjust next pointers  */
	}
	printf("\n-------------Linked list----------------");
	ptr = head->next;
	while (ptr) {
		printf("\n%d/", (*ptr).tag);
		printf("%s/", (*ptr).date);
		printf("%s/", (*ptr).fee_paid);
		printf("%s/", (*ptr).name);
		printf("%d/", (*ptr).age);
		printf("%s/", (*ptr).organization);
		printf("%s", (*ptr).job);
		ptr = (*ptr).next;
	}
}
/*
* void Delete_array(struct Person List[])
* Author: 202235005 Minseok Gwak
* Summary: remove all staff's data from the linked list
* Parameter: struct person array
* Return: nothing
*/
void Delete_array(struct Person List[]) {
    int i = 0, j = 0;
    char job[20] = "staff";
    while (i < 30) {
        j = 0;
        while ((List[i]).job[j] == job[j]) {
            if (j == 4) {
                (List[i]).tag = -1;
                (List[i]).date[0] = NULL;
                (List[i]).fee_paid[0] = NULL;
                (List[i]).name[0] = NULL;
                (List[i]).age = -1;
                (List[i]).organization[0] = NULL;
                (List[i]).job[0] = NULL;
            }
            j++;
        }
        i++;
    }
    printf("-------------Print data deleted array----------------");
    i = 0;
    while (i < 30) {
        if (List[i].tag == -1)
            printf("");
        else {
            printf("\n%d/", List[i].tag);
            printf("%s/", List[i].date);
            printf("%s/", List[i].fee_paid);
            printf("%s/", List[i].name);
            printf("%d/", List[i].age);
            printf("%s/", List[i].organization);
            printf("%s", List[i].job);
        }
        i++;
    }
    printf("\n");
}
/*
* void updateLateSubmitters(struct Person persons[], int person_num)
* Author: 202135801 Jihun Yang
* Summary: add registration information about "kang", and sort by age in the struct array
* Parameter: struct person array
* Return: nothing
*/
void updateLateSubmitters(struct Person persons[], int person_num)
{
    persons[30].tag = 31;
    strcpy(persons[30].date, "2022-11-30");
    strcpy(persons[30].fee_paid, "yes");
    strcpy(persons[30].name, "Kang");
    persons[30].age = 25;
    strcpy(persons[30].organization, "Gachon University");
    strcpy(persons[30].job, "Student");

    person_num++;

    struct Person temp;

    for (int i = 0; i < person_num; i++) {
        for (int j = 0; j < person_num - i; j++) {
            if (persons[j].age > persons[j + 1].age) {
                temp = persons[j];
                persons[j] = persons[j + 1];
                persons[j + 1] = temp;
            }
        }
    }
    for (int v = 0; v < person_num; v++) {
        temp = persons[v + 1];
        persons[v] = temp;
    }

    printf("\n\n-------------array----------------\n");
    for (int i = 0; i < 31; i++) {
        if (persons[i].tag == -1) {
            continue;
        }
        printf("%d/%s/%s/%s/%d/%s/%s\n", persons[i].tag, persons[i].date, persons[i].fee_paid, persons[i].name, persons[i].age, persons[i].organization, persons[i].job);
    }
}

/*
* void updateLateSubmitters_linked(struct Person* head)
* Author: 202135801 Jihun Yang
* Summary: add registration information about "kang", and sort by age in the linked list
* Parameter: struct person array
* Return: none
*/
void updateLateSubmitters_linked(struct Person* head)
{
    struct Person* p = head->next, * prev_p = head;
    struct Person late;

    late.tag = 31;
    strcpy(late.date, "2022-11-30");
    strcpy(late.fee_paid, "yes");
    strcpy(late.name, "Kang");
    late.age = 25;
    strcpy(late.organization, "Gachon University");
    strcpy(late.job, "Student");
    late.next = NULL;


    while (p)
    {
        if (p->age > late.age &&prev_p->age<late.age) {
            late.next = (*prev_p).next;
            (*prev_p).next = &late;
        }
        prev_p = p;
        p = p->next; /* adjust next pointers  */
    }
    printf("\n\nKang's data has been updated.\n");
    printf("-------------Linked list----------------");
    p = head->next;
    while (p) {
        printf("\n%d/", (*p).tag);
        printf("%s/", (*p).date);
        printf("%s/", (*p).fee_paid);
        printf("%s/", (*p).name);
        printf("%d/", (*p).age);
        printf("%s/", (*p).organization);
        printf("%s", (*p).job);
        p = (*p).next;
    }
}
